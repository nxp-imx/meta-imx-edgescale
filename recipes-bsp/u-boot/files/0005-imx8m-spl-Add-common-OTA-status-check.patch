From 971e33debaacf91f5a564eb41c93036d86bfc955 Mon Sep 17 00:00:00 2001
From: Alison Wang <alison.wang@nxp.com>
Date: Wed, 8 May 2019 15:15:24 +0800
Subject: [PATCH 05/11] imx8m: spl: Add common OTA status check

This patch adds OTA status check in SPL for I.MX8M. The address to load
the secondary boot loader will be different according to the status.

Signed-off-by: Alison Wang <alison.wang@nxp.com>
---
 arch/arm/mach-imx/imx8m/Makefile |   1 +
 arch/arm/mach-imx/imx8m/image.c  | 102 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 103 insertions(+)
 create mode 100644 arch/arm/mach-imx/imx8m/image.c

diff --git a/arch/arm/mach-imx/imx8m/Makefile b/arch/arm/mach-imx/imx8m/Makefile
index d68cdde..64a77a1 100644
--- a/arch/arm/mach-imx/imx8m/Makefile
+++ b/arch/arm/mach-imx/imx8m/Makefile
@@ -9,3 +9,4 @@ obj-y   += soc.o clock_slice.o
 obj-$(CONFIG_IMX8MQ) += clock_imx8mq.o
 obj-$(CONFIG_IMX8MM) += clock_imx8mm.o
 obj-$(CONFIG_VIDEO_IMXDCSS) += video_common.o
+obj-$(CONFIG_SPL_BUILD) += image.o
diff --git a/arch/arm/mach-imx/imx8m/image.c b/arch/arm/mach-imx/imx8m/image.c
new file mode 100644
index 0000000..f9bc57d
--- /dev/null
+++ b/arch/arm/mach-imx/imx8m/image.c
@@ -0,0 +1,102 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2019 NXP
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <image.h>
+#include <linux/compiler.h>
+#include <mmc.h>
+#include <spl.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+struct OTA_parameter {
+	char status;
+	char str[0x200 - 1];
+};
+
+int ota_status_check(void)
+{
+	struct mmc *mmc;
+	struct blk_desc *bdesc;
+	unsigned int blk_start, blk_cnt;
+	unsigned long offset, size;
+	struct OTA_parameter data;
+	int result, err;
+	static int lresult = 2;
+
+	printf("lresult 0x%x\n", lresult);
+	if ((lresult == 0) || (lresult == 1))
+		return lresult;
+
+	err = mmc_initialize(gd->bd);
+	if (err) {
+		printf("spl: could not initialize mmc. error: %d\n", err);
+		return err;
+	}
+
+	mmc = find_mmc_device(CONFIG_SYS_MMC_ENV_DEV);
+	if (!mmc) {
+		printf("spl: could not find mmc device\n");
+		return -ENODEV;
+	}
+
+	err = mmc_init(mmc);
+	if (err) {
+		printf("spl: mmc_init failed\n");
+		return err;
+	}
+
+	bdesc = mmc_get_blk_desc(mmc);
+
+	offset = 0x3f00000;
+	size = 0x200;
+	blk_start = ALIGN(offset, mmc->read_bl_len) / mmc->read_bl_len;
+	blk_cnt = ALIGN(size, mmc->read_bl_len) / mmc->read_bl_len;
+	blk_dread(bdesc, blk_start, blk_cnt, (uchar *)&data);
+
+	printf("status = %c\n", data.status);
+	switch (data.status) {
+	case '0':
+		result = 1;
+		break;
+	case '1':
+		result = 1;
+		data.status = '2';
+		blk_dwrite(bdesc, blk_start, blk_cnt, (uchar *)&data);
+		blk_dread(bdesc, blk_start, blk_cnt, (uchar *)&data);
+		printf("Update status = %c\n", data.status);
+		break;
+	case '2':
+		result = 0;
+		break;
+	case '3':
+		result = 0;
+		break;
+	case '4':
+		result = 0;
+		break;
+	case '8':
+		result = 1;
+		break;
+	default:
+		result = 0;
+	}
+
+	lresult = result;
+	return result;
+}
+
+unsigned long spl_nor_get_uboot_base(void)
+{
+	unsigned long offset = 0x60000;
+
+	if (ota_status_check())
+		offset = 0x160000;
+
+	printf("u-boot.itb location offset: 0x%lx\n", offset);
+	return (QSPI0_AMBA_BASE + offset);
+}
-- 
2.7.4

