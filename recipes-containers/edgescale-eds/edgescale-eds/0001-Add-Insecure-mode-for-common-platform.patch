From e261e4432b6fbbb66f8458224322a0154387a0af Mon Sep 17 00:00:00 2001
From: Xiaodong Xie <xiaodong.xie@nxp.com>
Date: Thu, 26 Jul 2018 13:46:08 +0800
Subject: [PATCH 1/2] Add Insecure mode for common platform.

Signed-off-by: Xiaodong Xie <xiaodong.xie@nxp.com>
---
 cert-agent/Makefile                     |  3 +-
 cert-agent/cert-agent.go                |  3 +-
 cert-agent/pkg/openssl/ecdsa.go         |  2 ++
 cert-agent/pkg/openssl/openssl.go       |  2 ++
 cert-agent/pkg/openssl/openssl_n.go     | 44 +++++++++++++++++++++++++++++
 cert-agent/pkg/openssl/rsa.go           |  2 ++
 cert-agent/pkg/securekey/securekey.go   | 49 ++++++++++++++++++++++++++++++++-
 cert-agent/pkg/securekey/securekey_n.go | 18 ++++++++++++
 8 files changed, 120 insertions(+), 3 deletions(-)
 create mode 100644 cert-agent/pkg/openssl/openssl_n.go
 create mode 100644 cert-agent/pkg/securekey/securekey_n.go

diff --git a/src/import/cert-agent/Makefile b/src/import/cert-agent/Makefile
index c9e461a..a6009e4 100644
--- a/src/import/cert-agent/Makefile
+++ b/src/import/cert-agent/Makefile
@@ -16,11 +16,12 @@ CROSS_COMPILE ?= aarch64-linux-gnu-
 CC := ${CROSS_COMPILE}gcc
 CGO_LDFLAGS += -L${SECURE_OBJ_PATH}/lib -L${OPENSSL_PATH} -L${OPTEE_CLIENT_EXPORT}
 CGO_CFLAGS += -I${SECURE_OBJ_PATH}/include -I${OPENSSL_PATH}/include
+GOBUILDTAGS ?= default
 
 
 all:
 	go get github.com/laurentluce/est-client-go
-	env CGO_ENABLED=1 GOOS=linux GOARCH=${ARCH} CC=${CC} CGO_CFLAGS="${CGO_CFLAGS}" CGO_LDFLAGS="${CGO_LDFLAGS}" go build --ldflags="-w -s" cert-agent.go
+	env CGO_ENABLED=1 GOOS=linux GOARCH=${ARCH} CC=${CC} CGO_CFLAGS="${CGO_CFLAGS}" CGO_LDFLAGS="${CGO_LDFLAGS}" go build --ldflags="-w -s" --tags "${GOBUILDTAGS}"
 
 clean:
 	rm -f cert-agent
diff --git a/src/import/cert-agent/cert-agent.go b/src/import/cert-agent/cert-agent.go
index 32a669c..c69d801 100644
--- a/src/import/cert-agent/cert-agent.go
+++ b/src/import/cert-agent/cert-agent.go
@@ -5,6 +5,7 @@
  *
  **********************************
  */
+
 package main
 
 import (
@@ -49,7 +50,7 @@ type Challenge struct {
 var cfg Config
 
 func InitFlags() {
-	cfg.SecureLevel = flag.Int("s", 1, "security level 0-2")
+	cfg.SecureLevel = flag.Int("s", 0, "security level 0-2")
 	flag.Parse()
 }
 
diff --git a/src/import/cert-agent/pkg/openssl/ecdsa.go b/src/import/cert-agent/pkg/openssl/ecdsa.go
index 63c4ea4..bbf1f8d 100644
--- a/src/import/cert-agent/pkg/openssl/ecdsa.go
+++ b/src/import/cert-agent/pkg/openssl/ecdsa.go
@@ -1,3 +1,5 @@
+// +build secure
+
 package openssl
 
 /*
diff --git a/src/import/cert-agent/pkg/openssl/openssl.go b/src/import/cert-agent/pkg/openssl/openssl.go
index c921519..6696112 100644
--- a/src/import/cert-agent/pkg/openssl/openssl.go
+++ b/src/import/cert-agent/pkg/openssl/openssl.go
@@ -1,3 +1,5 @@
+// +build secure
+
 package openssl
 
 /*
diff --git a/src/import/cert-agent/pkg/openssl/openssl_n.go b/src/import/cert-agent/pkg/openssl/openssl_n.go
new file mode 100644
index 0000000..c2aabb8
--- /dev/null
+++ b/src/import/cert-agent/pkg/openssl/openssl_n.go
@@ -0,0 +1,44 @@
+// +build !secure
+
+package openssl
+
+/*
+#include<stdio.h>
+
+typedef char ENGINE;
+ENGINE *C_Sobj_Engine_Init() {
+		ENGINE *eng=NULL;
+		return eng;
+}
+*/
+import "C"
+
+import (
+	"crypto"
+)
+
+// Not implemented. Reserved for future use.
+func Sobj_Init() *C.ENGINE {
+	eng := C.C_Sobj_Engine_Init()
+	return eng
+}
+
+// Not implemented. Reserved for future use.
+func (eng *C.ENGINE) Sobj_KeyGen(key string, id int) crypto.PrivateKey {
+	return nil
+}
+
+// Not implemented. Reserved for future use.
+func (eng *C.ENGINE) Sobj_Loadkey(key string) (crypto.PrivateKey, error) {
+	return nil, nil
+}
+
+// Not implemented. Reserved for future use.
+func parsePrivateKey(der []byte) (crypto.PrivateKey, error) {
+	return nil, nil
+}
+
+// Not implemented. Reserved for future use.
+func ParseSobjPrivateKey(block []byte) (int, error) {
+	return 0, nil
+}
diff --git a/src/import/cert-agent/pkg/openssl/rsa.go b/src/import/cert-agent/pkg/openssl/rsa.go
index c77ee02..ac34dd5 100644
--- a/src/import/cert-agent/pkg/openssl/rsa.go
+++ b/src/import/cert-agent/pkg/openssl/rsa.go
@@ -1,3 +1,5 @@
+// +build secure
+
 package openssl
 
 /*
diff --git a/src/import/cert-agent/pkg/securekey/securekey.go b/src/import/cert-agent/pkg/securekey/securekey.go
index 0fec2c2..6c89a8d 100644
--- a/src/import/cert-agent/pkg/securekey/securekey.go
+++ b/src/import/cert-agent/pkg/securekey/securekey.go
@@ -1,3 +1,5 @@
+// +build secure
+
 package sk
 
 /*
@@ -29,7 +31,7 @@ bool C_sk_fuid(char *out) {
         goto sk_get_fuid_fail;
     }
 
-    for (i =0; i < fuid_len; i++){
+    for (i = 0; i < fuid_len; i++){
         out += sprintf(out, "%02x", fuid[i]);
     }
     ret = 0;
@@ -40,6 +42,37 @@ fuid_malloc_fail:
     return ret;
 }
 
+bool C_sk_oemid(char *out) {
+    uint8_t ret, i ;
+    uint8_t oem_id_len;
+    uint8_t *oem_id;
+
+	oem_id = (uint8_t *)malloc(32);
+	if (!oem_id) {
+	    printf("malloc failed\n");
+	    ret = -1;
+	    goto oem_id_malloc_fail;
+	}
+	memset((void *)oem_id, 0, 32);
+
+    if (sk_get_oemid(oem_id, &oem_id_len)) {
+        printf("sk_get_oemid failed\n");
+        ret = -1;
+        goto sk_get_oem_id_fail;
+    }
+
+    for (i = 0; i < oem_id_len; i++){
+        out += sprintf(out, "%02x", oem_id[i]);
+    }
+
+    ret = 0;
+
+sk_get_oem_id_fail:
+    free(oem_id);
+oem_id_malloc_fail:
+    return ret;
+}
+
 bool C_sk_sign(char *MSG, char *out) {
 	int i = 0, ret = -1;
 	uint8_t *temp, *temp1;
@@ -146,6 +179,20 @@ func SK_fuid() (string, error) {
 	}
 }
 
+func SK_oemid() (string, error) {
+	buf := make([]byte, 128)
+	coemid := C.CString(string(buf))
+	defer C.free(unsafe.Pointer(coemid))
+
+	ret := C.C_sk_oemid(coemid)
+
+	if !ret {
+		return C.GoString(coemid), nil
+	} else {
+		return "", errors.New("OEMID read failed")
+	}
+}
+
 func SK_sign(msg string) (string, error) {
 	cmsg := C.CString(msg)
 
diff --git a/src/import/cert-agent/pkg/securekey/securekey_n.go b/src/import/cert-agent/pkg/securekey/securekey_n.go
new file mode 100644
index 0000000..b4fa4b7
--- /dev/null
+++ b/src/import/cert-agent/pkg/securekey/securekey_n.go
@@ -0,0 +1,18 @@
+// +build !secure
+
+package sk
+
+// Not implemented. Reserved for future use.
+func SK_fuid() (string, error) {
+	return "", nil
+}
+
+// Not implemented. Reserved for future use.
+func SK_oemid() (string, error) {
+	return "", nil
+}
+
+// Not implemented. Reserved for future use.
+func SK_sign(msg string) (string, error) {
+	return "", nil
+}
-- 
1.8.3.1

